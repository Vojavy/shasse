#!/usr/bin/env bash
# deploy.sh¬†‚Äì —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ music‚Äë, music‚Äëtgbot‚Äë –∏ registry‚Äë—Å–µ—Ä–≤–∏—Å–æ–≤ + Ingress
# Usage: ./deploy.sh dev|prod

set -euo pipefail
IFS=$'\n\t'

###############################################################################
# 0. –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –æ–∫–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)                      #
###############################################################################
pause_on_exit() {
  local rc=$?
  echo
  if [[ $rc -eq 0 ]]; then
    echo "‚úÖ  Script finished successfully."
  else
    echo "‚ùå  Script aborted with exit code $rc."
  fi
  read -n1 -rsp $'\nPress any key to close this window‚Ä¶'
}
trap pause_on_exit EXIT

###############################################################################
# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã                                                      #
###############################################################################
usage() { echo "Usage: $0 dev|prod" >&2; exit 1; }
[[ $# -eq 1 ]] || usage
[[ "$1" == "dev" || "$1" == "prod" ]] || usage
ENV="$1"

###############################################################################
# 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è                                           #
###############################################################################
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

echo "‚ñ∂Ô∏è  Environment: $ENV"
echo "‚ñ∂Ô∏è  Kube‚Äëcontext: $(kubectl config current-context)"

###############################################################################
# 3. –ü—Ä–∏–º–µ–Ω—è–µ–º ConfigMaps / Secrets                                           #
###############################################################################
echo "‚ñ∂Ô∏è  Applying ConfigMaps and Secrets‚Ä¶"
kubectl apply -R -f ./k3s/envs/

###############################################################################
# 4. (Re)—Å–æ–∑–¥–∞—ë–º Secret —Å YouTube cookies                                     #
###############################################################################
echo "‚ñ∂Ô∏è  (Re)creating Secret 'youtube-cookies'‚Ä¶"
kubectl create secret generic youtube-cookies \
  --from-file=youtube_cookies.txt=$SCRIPT_DIR/volumes/www.youtube.com_cookies.txt \
  --dry-run=client -o yaml | kubectl apply -f -

###############################################################################
# 5. Ingress‚Äë–º–∞–Ω–∏—Ñ–µ—Å—Ç—ã                                                        #
###############################################################################
echo "‚ñ∂Ô∏è  Applying Ingress manifests‚Ä¶"
kubectl apply -R -f ./k3s/ingress/

###############################################################################
# 6‚ÄëA. Docker‚Äëregistry (–æ–±—â–∏–π –¥–ª—è dev –∏ prod)                                 #
###############################################################################
echo "‚ñ∂Ô∏è  Deploying local Docker registry‚Ä¶"
kubectl apply -f ./k3s/services/registry/registry.yaml
# Ingress‚Äë–ø—Ä–∞–≤–∏–ª–æ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ server‚Äëingress.yaml, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–º–µ–Ω—ë–Ω –≤—ã—à–µ

###############################################################################
# 6‚ÄëB. –°–µ—Ä–≤–∏—Å—ã music / music‚Äëtgbot                                            #
###############################################################################
echo "‚ñ∂Ô∏è  Applying '$ENV' overlay for music‚Äëservice‚Ä¶"
kubectl apply -k "./k3s/services/music/${ENV}"

echo "‚ñ∂Ô∏è  Applying '$ENV' overlay for music‚Äëtgbot‚Äëservice‚Ä¶"
kubectl apply -k "./k3s/services/music-tgbot/${ENV}"

###############################################################################
# 7. Minikube‚Äë—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è                                            #
###############################################################################
if [[ "$ENV" == "dev" && "$(kubectl config current-context)" =~ ^minikube$ ]]; then
  echo "‚ñ∂Ô∏è  Enabling Minikube ingress addon‚Ä¶"
  if ! minikube addons list | grep -qE '^ingress\s*Enabled'; then
    minikube addons enable ingress
  else
    echo "‚ÑπÔ∏è  ingress addon already enabled"
  fi

  echo "‚è≥  Waiting for ingress‚Äënginx controller to become ready‚Ä¶"
  kubectl wait --namespace ingress-nginx \
    --for=condition=Available deployment/ingress-nginx-controller \
    --timeout=120s

  echo "üöá  Ensuring 'minikube tunnel' is running‚Ä¶"
  if ! pgrep -f "minikube tunnel" >/dev/null 2>&1; then
    nohup minikube tunnel --cleanup >/dev/null 2>&1 &
    disown
    echo "‚ÑπÔ∏è  Tunnel started"
  else
    echo "‚ÑπÔ∏è  Tunnel already running"
  fi
fi

if [[ $ENV == dev ]]; then
  echo -e "\n‚ÑπÔ∏è  Push example:"
  echo "   docker build -t registry.local/music-tgbot:dev ."
  echo "   docker push    registry.local/music-tgbot:dev"
else
  echo -e "\n‚ÑπÔ∏è  Push example (prod):"
  echo "   docker login   registry.distrbyt.com"
  echo "   docker build -t registry.distrbyt.com/music-tgbot:latest ."
  echo "   docker push    registry.distrbyt.com/music-tgbot:latest"
fi

echo "‚úÖ  $ENV deployment complete!"
